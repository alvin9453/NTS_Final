<!DOCTYPE html>
<html>
<head>
    <title>即時互動問答</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link rel="stylesheet" href="/stylesheets/irs-teacher.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>   
    <script src="https://www.gstatic.com/firebasejs/4.9.1/firebase.js"></script>
    <script src="/javascripts/firebase-init.js"></script>

    <script src="/javascripts/bootbox.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/javascripts/RTCMultiConnection.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/4.9.1/firebase.js"></script>
    <script src="/javascripts/firebase-init.js"></script>

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

    <script>
        initFirebase(); 
        var userEmail = "<%= user.emails[0].value %>";
        var thisUserEID = userEmail.split('@')[0];
        var choiceQuestionStack = [];
        // init socket.io
        var connection = new RTCMultiConnection(null, {
            useDefaultDevices: true // if we don't need to force selection of specific devices
        });
        connection.socketURL = '/';
        connection.socketMessageEvent = 'note-taking-system';
        var socket = connection.getSocket();
        socket.emit('whoAmI','teacher');  // Let server know who you are
        socket.emit("requestTodaySlashQuestion" , {});
        // Load the Visualization API and the corechart package.
        google.charts.load('current', {'packages':['corechart']});
    
        function init(){
            initFirebase();
        };
        function drawChart(qid) {
            // Create the data table.
            var title = document.getElementById(qid + "-Q").innerHTML;
            var countA = document.getElementById(qid + "-A").innerHTML;
            var countB = document.getElementById(qid + "-B").innerHTML;
            var countC = 0
            if ( document.getElementById(qid + "-C") )
                countC = document.getElementById(qid + "-C").innerHTML;
            var countD = 0;
            if ( document.getElementById(qid + "-D") )
                countD = document.getElementById(qid + "-D").innerHTML;

            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Topping');
            data.addColumn('number', 'Slices');
            data.addRows([
                ['A', Number(countA)],
                ['B', Number(countB)],
                ['C', Number(countC)],
                ['D', Number(countD)]
            ]);

            // Set chart options
            var options = {'title': title,
                            'titleTextStyle' : {
                                fontSize : 16, fontName : 'Noto Sans TC', bold : false
                        },
                        'legend' : { textStyle: { fontSize: 14} },
                        'pieSliceTextStyle' : {
                            fontName : 'Noto Sans TC',
                            fontSize : 16,
                        },
                        'width':500,
                        'height':200};

            // Instantiate and draw our chart, passing in some options.
            var newDiv = document.createElement('div');
            newDiv.setAttribute('id' , qid);
            chartDiv.append(newDiv);
            var chart = new google.visualization.PieChart(document.getElementById(qid));

            chart.draw(data, options);

            socket.emit('sendChoiceQuestionStatistics' , {
                qid : qid,
                countA : countA,
                countB : countB,
                countC : countC,
                countD : countD
            });
      
        }
        function makeid() {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

            for (var i = 0; i < 10; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));

            return text;
        }

        function createChoiceQuestionLiElement(qid, option, content){
            var liElement = document.createElement("li");
            liElement.setAttribute("class" , "list-group-item");
            liElement.innerHTML = option + ". " + content;

            var span = document.createElement("span");
            span.setAttribute("class", "badge");
            span.setAttribute("id", qid + "-" + option );
            span.innerHTML = 0;
            liElement.append(span);

            return liElement;
        }

        function validInput(q , a, b, c, d){
            if(q == ''){
                bootbox.alert("<h2>請填寫問題描述 !</h2>");
                return false;
            }
            else if(a == ''){
                bootbox.alert("<h2>請至少填寫兩個選項 - A 和 B</h2>");
                return false;
            }
            else if(b == ''){
                bootbox.alert("<h2>請至少填寫兩個選項 - A 和 B</h2>");
                return false;
            }
            else if(c == '' && d != ''){
                bootbox.alert("<h2>若要新增 D 選項，請先填寫 C 選項的內容 !</h2>");
                return false;
            }else{
                return true;
            }
                
        }
        function createChoiceQuestion(){
            var dialog = bootbox.dialog({
                title: '<h1 align="center">即時互動問答 - 新增問題</h1>',
                message: `
                    <div class="input-group">
                        <div class="col-sm-12">
                            <label>問題描述 (必填) : </label>
                            <input class="form-control " type="text" id="question"/>
                        </div>
                    </div>
                    <br>
                    <div class="input-group">
                        <div class="col-sm-12">
                            <label>選項 A (必填):</label>
                            <input class="form-control" type="text" id="optionA"/>
                        </div>
                    </div>
                    <br>
                    <div class="input-group">
                        <div class="col-sm-12">
                            <label>選項 B (必填):</label>
                            <input class="form-control" type="text" id="optionB"/>
                        </div>
                    </div>
                    <br>
                    <div class="input-group">
                        <div class="col-sm-12">
                            <label>選項 C :</label>
                            <input class="form-control" type="text" id="optionC"/>
                        </div>
                    </div>
                    <br>
                    <div class="input-group">
                        <div class="col-sm-12">
                            <label>選項 D :</label>
                            <input class="form-control" type="text" id="optionD"/>
                        </div>
                    </div>
                `,
                buttons: {
                    cancel: {
                        label: "取消",
                        className: 'btn-danger'
                    },
                    ok: {
                        label: "新增",
                        className: 'btn-info',
                        callback: function(){
                            var question = document.getElementById("question").value;
                            var optionA = document.getElementById("optionA").value;
                            var optionB = document.getElementById("optionB").value;
                            var optionC = document.getElementById("optionC").value;
                            var optionD = document.getElementById("optionD").value;
                            if ( !validInput(question , optionA, optionB, optionC, optionD) )
                                return;
                            var qid = makeid();
                            var opAElement = createChoiceQuestionLiElement(qid , 'A' , optionA);
                            var opBElement = createChoiceQuestionLiElement(qid , 'B' , optionB);
                            
                            var questionTitle = document.createElement("li");
                            questionTitle.setAttribute('id' , qid + "-Q");
                            questionTitle.innerHTML = question;
                            questionBlock.append(questionTitle);

                            var ulElement = document.createElement("ul");
                            ulElement.setAttribute("class" , "list-group");            

                            ulElement.append(opAElement);
                            ulElement.append(opBElement);

                            if(optionC){
                                var opCElement = createChoiceQuestionLiElement(qid , 'C' , optionC);
                                ulElement.append(opCElement);
                                if(optionD){  // 有 C 選項，才會有 D 選項，不給跳號啦
                                    var opDElement =createChoiceQuestionLiElement(qid , 'D' , optionD);
                                    ulElement.append(opDElement);
                                }
                            }
                            var socket = connection.getSocket();
                            var newChoiceQuestion = {
                                'qid' : qid,
                                'title' : question,
                                'optionA' : optionA,
                                'optionB' : optionB,
                                'optionC' : optionC,
                                'optionD' : optionD
                            }
                            socket.emit('newChoiceQuestion',newChoiceQuestion);
                            choiceQuestionStack.push(newChoiceQuestion)
                            questionBlock.append(ulElement);
                            drawChart(qid);
                        }
                    }
                }
            });
        }

        function msgSendBtn(){
            var msg = document.getElementById("msgInput").value;
            var msgBlock = document.getElementById("messageBlock");
            if( msg == "" || msg == "\n" ){
                document.getElementById("msgInput").value = "";   
                return;
            }
            document.getElementById("msgInput").value = "";
            if(isSlashQuestion(msg)){
                var questionKey = firebase.database().ref("slash-command/").push().key;
                var newSlashQuestion = {uname : " <%= user.displayName %>" ,  uid : thisUserEID , msg : msg , qid : questionKey , character:"teacher" };
                socket.emit('inputSlashQuestion' , newSlashQuestion);
            }else if( isSlashHelp(msg) ){
                displayEachMessage("【幫助】斜線指令使用說明<br><br>/Q [space] question : 發起一個問題，讓學生回答<br><br>/A [space] response : 以訊息回答學生問題<br><br>", "system-help");
            }else{
                socket.emit('inputMessage' , {uname : "<%= user.displayName %>" ,  uid : thisUserEID , msg : msg , character:"teacher" } );
            }
            
        }
    
        function displayEachMessage(content , type){
            // msgType : 1. normal msg , 2. system-q , 3. system-ans, 4. system-alert,  5. system-asking, 6. system-help
            var msgBlock = document.getElementById("messageBlock");
            var newMsg = document.createElement("li");
            switch(type){
                case "msg" :
                    newMsg.setAttribute("class" , "normalMsg");
                    break;
                case "system-q" :
                    newMsg.setAttribute("class" , "systemMsg-q");
                    break;
                case "system-ans" :
                    newMsg.setAttribute("class" , "systemMsg-ans");
                    break;
                case "system-alert" :
                    newMsg.setAttribute("class" , "systemMsg-alert");
                    break;
                case "system-asking" : 
                    newMsg.setAttribute("class" , "systemMsg-asking ");
                    break;
                case "system-help" : 
                    newMsg.setAttribute("class" , "systemMsg-help ");
                    break;
            }
            newMsg.innerHTML = content;
            msgBlock.append(newMsg);
            msgBlock.scrollTop = msgBlock.scrollHeight;
        }
        function displayEachSlashQuestion(content){
            var msgBlock = document.getElementById("slashQuestionBlock");
            var newMsg = document.createElement("li");
            newMsg.setAttribute("class" , "slashQuestion");
            newMsg.innerHTML = content;
            msgBlock.append(newMsg);
            msgBlock.scrollTop = msgBlock.scrollHeight;
        }

        function isSlashQuestion(msg){
            var qaPatt= /^\/Q\s.+/i;
            return qaPatt.test(msg);
        }
        function isSlashAnswer(msg){
            var qaPatt= /^\/A\s[\d]+\s.+/i;
            return qaPatt.test(msg);
        }
        function isSlashAnswerFromTeacher(msg){
            var qaPatt= /^\/A\s.+/i;
            return qaPatt.test(msg);
        }
        function isSlashHelp(msg){
            var qaPatt= /^\/\?/i;
            return qaPatt.test(msg);
        }

        /* socket.on */

        // Listen to students' choice answers
        socket.on('studentChoiceAnswerToTeacher',function(res){
            var qid = res.qid;
            var answer = res.answer;
            var optionId = qid + "-" + answer;
            var count = Number(document.getElementById(optionId).innerHTML);
            document.getElementById(optionId).innerHTML = ++count;
            drawChart(qid);
            
        });

        // When student open irs-student page, send current choice
        socket.on('requestCurrentChoiceQuestionToTeacher',function(data){
            if( choiceQuestionStack.length == 0 ){
                return;
            }
            socket.emit('responseCurrentChoiceQuestionToStudent' ,choiceQuestionStack);
        });


        socket.on('msgBroadcast', function(msgObj){ 
            var msg = msgObj.msg;
            var userName = msgObj.uname;
            var character = msgObj.character;
            var showMsg = "";
            if( isSlashQuestion(msg) && character == "student" ){
                var asking = msg.slice(3);
                displayEachMessage("【學生發問】" + asking , "system-asking");  
            }else if( isSlashAnswerFromTeacher(msg) && character == "teacher" ){
                var res = msg.slice(3);
                displayEachMessage("【教師回答】" + res , "system-asking");  
            }else{
                if(msgObj.character == "teacher") // Normal message
                    showMsg += "[教師]";
                showMsg += userName + " : " + msg;
                displayEachMessage(showMsg);
            }
            
            
        });

        socket.on('slashAnswer' , function(msgObj){
            var index_str = msgObj.msg.split(" ")[1];
            var index = Number(index_str) - 1; 
            var content = "";
            for( var i = 2; i < msgObj.msg.split(" ").length; i++){
                content += msgObj.msg.split(" ")[i] + " ";
            }
            content.trim();
            var newAns = document.createElement("div");
            var studentName = msgObj.uname;
            newAns.innerHTML = "<font color='green'>- " + studentName  + " : " + content + "</font>";
            var slashQuestionsHtmlCollection = document.getElementById("slashQuestionBlock").getElementsByTagName("li");
            slashQuestionsHtmlCollection[index].appendChild(newAns);
            displayEachMessage("【系統】學生<b> " + studentName + "</b> 回答了問題 <b>" + index_str + "</b>" , "system-ans");
        });

        socket.on('slashQuestion', function(msgObj){
            var showMsg = msgObj.msg.slice(3);
            var userName = msgObj.uname;
            
            displayEachSlashQuestion(showMsg);
            displayEachMessage("【系統】已新增一則問題" , "system-q");
        });

        socket.on("todaySlashQuestion",function(questions){
            if( document.getElementById("slashQuestionBlock").innerHTML == "" ){
                var showMsg = "";
                for(var i = 0; i < questions.length; i++){
                    showMsg = questions[i].msg.slice(3);
                    displayEachSlashQuestion(showMsg , questions[i].qid);
                }
            }
        });
        socket.on("resetSlashQuestion", function(data){
            bootbox.alert("<h3>時限已到，重置斜線指令問答紀錄...</h3>");
            document.getElementById("slashQuestionBlock").innerHTML = "";
        });

    </script>
</head>
<body>
</body onload="init()">
    <% include layouts/header %>
    <br><br><br>
    <h2 align="center">即時互動問答系統</h2>    
    <div class="container">
        <div class="row">
            <div class="col-sm-6 col-md-6">
                    <h3 align="center">課程討論區</h3>
                    <ul id="messageBlock" class="messageBlock"></ul>
                    <div class="form-group">
                            <textarea class="form-control" rows="2" id="msgInput" autocomplete="off" style="border:solid 3px black" placeholder=""></textarea>
                        <button id="msgSendBtn" class="btn btn-primary" onclick="msgSendBtn()" style="float: right;">送出</button>
                        <script>
                            /* Enter trigger onclick event */
                            var msgInput = document.getElementById("msgInput");
                            msgInput.addEventListener("keyup", function(event) {
                                event.preventDefault();
                                if (event.keyCode === 13) {
                                    document.getElementById("msgSendBtn").click();
                                }
                            });
                        </script>
                    </div>
            </div>
            <div class="col-sm-6 col-md-6">
                    <h3 align="center">斜線指令問答紀錄</h3>
                    <ul id="slashQuestionBlock" class="slashQuestionBlock"></ul>
            </div>                
        </div>
        <hr>
        <h3 align="center">選項問答與統計</h3>
        <div class="row">
            <a id="createQ" class="btn btn-success list-group-item" onclick="createChoiceQuestion()"><span class="glyphicon glyphicon-plus"></span>  新增一個選擇題</a>
        </div>
        <div class="row">
            <div class="col-sm-6 col-md-6">
                <h3 align="center">問題列表</h3>
                <ul class="list-group" id="questionBlock"></ul>
            </div>
            <div class="col-sm-6 col-md-6">
                <h3 align="center">統計圖表</h3>
                <div id="chartDiv" align="center"></div>
            </div>
        </div>
    </div>
    <div class="footer">
            <% include layouts/footer %>
    </div>
          

</html>
